-- phpMyAdmin SQL Dump
-- version 4.0.10deb1
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Дек 14 2015 г., 20:10
-- Версия сервера: 5.5.46-0ubuntu0.14.04.2
-- Версия PHP: 5.5.9-1ubuntu4.14

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- База данных: `ITA-codeforce`
--

-- --------------------------------------------------------

--
-- Структура таблицы `assignment_js`
--

DROP TABLE IF EXISTS `assignment_js`;
CREATE TABLE IF NOT EXISTS `assignment_js` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `header` text,
  `etalon` text,
  `footer` text,
  `json` text NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=445434112 ;

--
-- Очистить таблицу перед добавлением данных `assignment_js`
--

TRUNCATE TABLE `assignment_js`;
--
-- Дамп данных таблицы `assignment_js`
--

INSERT INTO `assignment_js` (`ID`, `header`, `etalon`, `footer`, `json`) VALUES
(1, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 1,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(2, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 2,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(6, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = (  ( floor(x * 100 ) - floor(x_for_etalon * 100 ) )  == 0 ) && ( vasya == vasya_for_etalon );isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = (  ( floor(x * 100 ) - floor(x_for_etalon * 100 ) )  == 0 ) && ( vasya == vasya_for_etalon );isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', ''),
(7, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = (  ( floor(x * 100 ) - floor(x_for_etalon * 100 ) )  == 0 ) && ( vasya == vasya_for_etalon );isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "twoa"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = (  ( floor(x * 100 ) - floor(x_for_etalon * 100 ) )  == 0 ) && ( vasya == vasya_for_etalon );isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', ''),
(33, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = compareArrs<float,2>(result,result) && compareArrs<float,2>(result,result_etalon);isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && x==x_etalon;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', ''),
(35, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = Arrays.equals(result, result) && Arrays.equals(result, result_etalon);isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 35,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(37, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = Arrays.equals(result, result) && Arrays.equals(result, result_etalon);isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 37,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(38, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = Arrays.equals(result, result) && Arrays.equals(result, result_etalon);isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 38,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(39, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = Arrays.equals(result, result) && Arrays.equals(result, result_etalon);isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 39,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(40, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = Arrays.equals(result, result) && Arrays.equals(result, result_etalon);isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif (Arrays.equals(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 40,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(43, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', ''),
(44, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', ''),
(45, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 45,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(46, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 46,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}"arg_nam'),
(47, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) &&  compareArrs<string,2 > ( result, result_etalon );isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 47,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is•'),
(48, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 48,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":3} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(49, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) &&  compareArrs<string,2 > ( result, result_etalon );isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 49,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is5'),
(50, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result );isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 50,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":33} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}est is');
INSERT INTO `assignment_js` (`ID`, `header`, `etalon`, `footer`, `json`) VALUES
(51, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring * result;\nstring * result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 51,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is'),
(52, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float *  &x,string *  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float *  &x,string *  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring *  result;\nstring *  result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 52,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is'),
(53, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nstring * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\nstring * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring *  result;\nstring *  result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 53,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is5'),
(54, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring *  result;\nstring *  result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 54,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is'),
(55, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring result_etalon[2];\nstring *  result;\nstring *  result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 55,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is'),
(56, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nstring * result;\nstring result_etalon [2];\nstring * result_for_etalon;\nfloat x;\nfloat x_etalon;\nfloat x_for_etalon;\nstring vasya;\nstring vasya_etalon;\nstring vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 56,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}uest is'),
(100, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 100,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(150, 'import java.util.Arrays;\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 150,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(151, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 151,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(152, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 152,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(153, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "c++",\n"task": 153,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(166, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n			bool compareArrs(T arr1[size],T arr2[size])\n				{\n				for (int i=0;i<size;i++)\n				{\n				//if (strcmp(typeid(T).name(), "f") == 0)\n				//{\n					//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n				//	return false;\n				//}\n 				//else	\n					if (arr1[i] != arr2[i])\n						return false;\n					}\n					return true;\n			}\nint main()\n					{\nstring  *result;\nstring  result_etalon [2];\nstring  *result_for_etalon;\nfloat  x;\nfloat  x_etalon;\nfloat  x_for_etalon;\nstring  vasya;\nstring  vasya_etalon;\nstring  vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string ,2 > ( result, result ) &&  compareArrs<string ,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - floor(x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<string ,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "java+",\n"task": 166,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(301, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\nfloat * function_etalon(float  *x,string  *vasya)\n{\n return NULL;\n}\nfloat * function_main(float  *x,string  *vasya)\n{\n', ' ', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n			{\nfloat result_etalon[2];\nfloat * result;\nfloat * result_for_etalon;\nfloat  x[2];\nfloat  x_etalon[2];\nfloat  x_for_etalon[2];\nstring  vasya[2];\nstring  vasya_etalon[2];\nstring  vasya_for_etalon[2];\nbool isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult[0] =  (float) 10.0\n;\nresult[1] =  (float) 12.0\n;\nx_for_etalon[0] = x[0] = 10.0\n;\nx_for_etalon[1] = x[1] = 12.0\n;\nvasya_for_etalon[0] = vasya[0] = "20"\n;\nvasya_for_etalon[1] = vasya[1] = "5"\n;\nx_etalon[0] = 10.0\n;\nx_etalon[1] = 12.0\n;\nvasya_etalon[0] = "20"\n;\nvasya_etalon[1] = "5"\n;\nvariablesCorrect = compareArrs<float,2>(x,x_etalon) && compareArrs<string,2>(vasya,vasya_etalon);\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif (compareArrs<float,2>(result_etalon, result) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\n\n}', ''),
(540, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn 0;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring * result;\nstring result_etalon [2];\nstring * result_for_etalon;\nfloat x;\nfloat x_etalon;\nfloat x_for_etalon;\nstring vasya;\nstring vasya_etalon;\nstring vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"lang": "c++",\n"task": 540,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(550, '#include <iostream>\n		#include <cstdlib>\n		#include <algorithm>\n using namespace std;\n		#include <cxxabi.h>\n		#include <cmath>\n		#include <stdio.h>\n		#include <string.h>\n\n string * function_etalon(float  &x,string  &vasya)\n{\nreturn NULL;\n}\n string * function_main(float  &x,string  &vasya)\n{\n', '', 'return 0;\n}\ntemplate<typename T,int size>\n	bool compareArrs(T arr1[size],T arr2[size])\n		{\n		for (int i=0;i<size;i++)\n		{\n		//if (strcmp(typeid(T).name(), "f") == 0)\n		//{\n			//if (fabs(arr1[i]) - arr2[i] ) > 0.009) \n		//	return false;\n		//}\n 		//else	\n			if (arr1[i] != arr2[i])\n				return false;\n			}\n			return true;\n	}\nint main()\n					{\nstring * result;\nstring result_etalon [2];\nstring * result_for_etalon;\nfloat x;\nfloat x_etalon;\nfloat x_for_etalon;\nstring vasya;\nstring vasya_etalon;\nstring vasya_for_etalon;\nbool  isTrue;\nbool variablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<string,2 > ( result, result ) && false;isTrue = false;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @0@";\nelse\nstd::cout << " @0!@";\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ( floor(x * 100 ) - floor(x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = true;isTrue = true;\nif ( compareArrs<string,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nstd::cout << " @1@";\nelse\nstd::cout << " @1!@";\n\nreturn 0;\n}', '{\n"operation": "addtask",\n"etalon": "",\n"lang": "c++",\n"task": 550,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":7} ]],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = false;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}'),
(445434111, '\n\nfunction  function_etalon( x, vasya)\n{\nreturn 0;\n}\nfunction  function_main( x, vasya)\n{\n', '', 'return 0;\n}\nvar result;\nvar result_etalon;\nvar result_for_etalon;\nvar x;\nvar x_etalon;\nvar x_for_etalon;\nvar vasya;\nvar vasya_etalon;\nvar vasya_for_etalon;\nvar isTrue;\nvarvariablesCorrectByEtalon,variablesCorrect;\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 10.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 10.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon =  compareArrs<var,2 > ( result, result ) &&  compareArrs<var,2 > ( result, result_etalon );isTrue = true;\nif ( compareArrs<var,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\nresult_etalon[0] = "adin"\n;\nresult_etalon[1] = "two"\n;\nx_for_etalon = x = 12.0\n;\nvasya_for_etalon = vasya = "safdasdf"\n;\nx_etalon = 12.0\n;\nvasya_etalon = "safdasdf"\n;\nvariablesCorrect = (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 ) && ( vasya == vasya_etalon );\n result_for_etalon = function_etalon(x_for_etalon,vasya_for_etalon);\n result = function_main(x,vasya);\nisTrue = true;\nvariablesCorrectByEtalon = false && (  ((x * 100 ) - (x_etalon * 100 ) )  == 0 );isTrue = true;\nif ( compareArrs<var,2 > ( result_etalon, result ) && variablesCorrect && isTrue)\n', '{\n"operation": "addtask",\n"etalon": "",\n"name": "test example",\n"lang": "JS",\n"task": 445434111,\n"function": {\n"function_name": "function",\n"type": 3,\n"checkable_args_indexes":[ [ {"first":0,"second":0},{"first":0,"second":1} ],[ {"first":2,"second":3},{"first":3,"second":4} ] ],\n"results": [["adin", "two" ],["adin", "two" ] ],\n"compare_mark": [0, 1],\n"tests_code":[ "isTrue = true;", "isTrue = true;"],\n"args": [\n{\n"type": 1,\n"arg_name": "x",\n"value": [10.0, 12.0],\n"compare_mark": [2, 3],\n"etalon_value": [10.0, 12.0]\n},\n{\n"type": 3,\n"arg_name": "vasya",\n"value": ["safdasdf", "safdasdf"],\n"compare_mark": [4, 0],\n"etalon_value": ["safdasdf","safdasdf"]\n}\n]\n}\n}e;\nvariablesCore');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
